Functions/Variables
######################## docs.python.org
print("hello, world") -- print = console.log
input -- prompt, like in inquirer :::: return value is the prompt input [name = input("What's your name?")]

note: (Comments are left with #)
can leave multilines with """ comments """

template literals :::: f"Hello {variable}" [just add an f before the string and brackets around the variable!]

print('hello,', end=' ') #Can actually edit the end option directly (we only know this via the python docs)
print('World') #now they print on the same line, cool right? since the default for print ends with \n

Interesting that "end" is just passed in as an argument and not as an option object

String Methods
#######################
str = str.strip() removes whitespace from str :::: aka .trim in js
str = str.capitalize() capitalizes the first letter (pretty cool)
str = str.title() captializes the first letter of each word

str = str.split(" ") splits it on whitespace into an array [exactly like js]
can even destructure from an array --- first, last = name.split(" ")    [unlike in js where we do const [first,last] = name.split(" ")]

Int Methods
########################
int("1") = 1 :::: [basically parseInt()]
+, -, / , *, %

Float Methods
#######################
float("1.2") = 1.2 :::: [turns the string into a float if applicable]
round(float("1.2")) = 1 :::: [Way better than Math.floor()]
round(float(".3333"), 2) = .33 :::: rounds to 2 decimals
f"{number:,}" :::: [formats the number with commas]
f"{number:.2f}" :::: formats the number to 2 decimals

Functions
#######################
hello() is a function call
def :::: is the keyword to define Functions [indents are important - indent below that code is part of that function]
def hello(): 
    print("hello")

def hello(name="luke"): [can define default values like in JS. very similar def = function]
    print(f"hello {name}")

functions must be above the call in the python script.

New Convention.####### now we can define our functions in any order so long as main is the last thing called
def main():
    name = input("What's your name? ")
    hello(name)

variables are scoped inside of the function to which it belongs [like in JS]

Returns.##########
Same as JS. Just (return x)
[python squares note: x**2, pow(x, 2)]

############################
LOGIC
############################
>, >=, <, <=, ==, != [same as js]
if x < y: [no parenthesis like in js, and instead of {} you use : and indents]

if
elif [else if in javascript (stop asking new questions if we fufill one)]

if score >= 90 and score <= 100: [and instead of && :::: or instead of ||]
    thing

[else is default case like in js]

[honestly, all mostly the same as in JS] :::: no ===, just == :::: 

MATCH.############################

match name: [match = switch in js && _ == default && | can be used for or in match && don't need breaks]
    case "Harry" | "Hermoine" | "Ron:
        print("Gryffindor")
    case "Draco":
        print("Slytherin")
    case _:
        print("Default")

LOOPS.#############################

i = 3
while i > 0:
    print("meow")
    i -= 1 [no i-- in python]

for i in [1,2,3] (will loop 3 times, one for each item in the "list" aka an array)
for i in range(3): (will loop 3 times. for i in range is sick)

common in python to use unused variables like so:
for _ in range(3): 

print("\nmeow" * 3, end='') also meows 3 times 

[(note: indentations mattering is weird)]

while True:
    n = int(input("What's x"))
    if n > 0
        break

LISTS.###################################
[Lists are like JS arrays]
Bracket notation like in JS (students[0])

for student in students: [just like in JS, only with the indent syntax]
    print(student)

for i in range(len(students)): [len instead of .length]
    print(students[i])

DICTS.#####################################
Key value pairs like JS objects
students = {
    "Hermoine": "Gryffindor, 
    "Draco": "Slytherin"
}
students["Hermione"] = Gryffindor

for student in students:
    print(student, students[student]) [this will print all of the keys of the dictionary... and then students[student] gets other value very cool]

can do arrays of objects in this too. 
students = [
    {"name": "Harry", "house": "Griff", "patronus": "Elk"},
    {"name": "Draco", "house": "Sylyth", "patronus": None}
]

for student in students:
    print(student["name"]) [prints each student's name etc...]

None = null in a dictionary

EXCEPTIONS.####################################

try-except blocks [pretty much like try/catch blocks in JS]
 
try:
    x = int(input("what's x? "))
    print(f"x is {x}")
except ValueError:  [could use a generic except instead by just doing except: (bad form, though)]
    print("x is not an integer")    

-----
try:
    x = int(input("what's x? "))
except ValueError:
    print("x is not an integer")

print(f"x is {x}")
[this "NameErrors" because... x = int... is invalid if "cat"]

------fix with
try:
    x = int(input("what's x? "))
except ValueError:
    print("x is not an integer")
else:
    print(f"x is {x}")
    
[can add else at the end of a try except block as a catchall... but its always called... unless an exception happens...]
[else only runs if no exceptions]

[while True loop w/ break to get out is cool but same as JS]
[return also breaks you out of while true loops]

---------pass
def getInt():
    while True:
        try:
            return int(input("what's x? "))
        except ValueError:
            pass
            
[pass just continues the loop from the top?]

MODULES.##############################################
import random
random.choice([1,2,3,4,5])

--from
(from random import choice)[to only import random.choice]
choice([1,2,3,4,5])

random.randint(a,b) -> random number between a and b (cool)
random.shuffle(x) -> takes in a list of values and randomly sorts them in place

-------------------
import statistics

statistics.mean([100, 90]) -> finds the mean (cool)

--------------------
import sys

sys.argv -> list of words typed after python command (like nodejs) 
print("hello, my name is ", sys.argv[1]) -> zzz... sys.argv[0] is the file call so it starts at [1] for the args

--sys guarding

if len(sys.argv) > 1:
    print("hello, my name is ", sys.argv[1])

--sys.exit

if len(sys.argv) < 2:
    sys.exit("Too few arugments") [intentional early exit whole program.]

print("hello, my name is", sys.argv[1])

--slice of a list
sys.argv[1:] [range 1 til ...everything else (mad cool tbh)]
for arg in sys.argv[1:]:
    print("hello, my name is", arg)

argv[1:-1] -> 1 to 1 from the end... epic

-----------------------------------------
PACKAGES

pyPI (python package index)
pip (like npm)

pip install cowsay (to get cowsay package)
if len(sys.argv) == 2:
    cowsay.cow("hello, " + sys.argv[1]) [lol]

---------------------------------------------
APIs

requests package
pip install requests

import requests
import sys

if len(sys.argv) != 2:
    sys.exit("no")

response = requests.get(
    "https://itunes.apple.com/search?entity=song&limit=1&term=" + sys.argv[1])
print(response.json())

[Very nice. Appears to be synchronus (blocks code below it) automatically]

----------------------------------------------------------
import json
import requests
import sys

if len(sys.argv) != 2:
    sys.exit("no")

response = requests.get(
    "https://itunes.apple.com/search?entity=song&limit=1&term=" + sys.argv[1])
print(json.dumps(response.json(), indent=2))
o = response.json()

for result in o["results"]:
    print(result["trackName"])

[this json.dumps indent=2 formats the json in the command line]

-----------------------------------
module imports

def main():
    hello("world")
    goodbye("world")


def hello(name):
    print(f"hello, {name}")


def goodbye(name):
    print(f"goodbye, {name}")


if __name__ == "__main__": [this bizzare if, basically says: (if this is the main file, run main, if imported, don't.)]
    main()

import sys
from sayings import hello [will run entire file sayings and look to import hello]

if len(sys.argv) == 2:
    hello(sys.argv[1])

UNIT TESTS.##########################################################
assert [asserts something is true. if wrong, you see an error]

def test_square():
    assert square(2) == 4
    assert square(3) == 9

pytest package [like jest i guess]

--in cmdline
python -m pytest test_calculator.py

def test_str():
    with pytest.raises(TypeError):
        square("cat")

-----------------------------------------
Make your own pacakges with __init__.py
$ python -m pytest test [runs the whole folder test if test has __init__.py in it]