Functions/Variables
######################## docs.python.org
print("hello, world") -- print = console.log
input -- prompt, like in inquirer :::: return value is the prompt input [name = input("What's your name?")]

note: (Comments are left with #)
can leave multilines with """ comments """

template literals :::: f"Hello {variable}" [just add an f before the string and brackets around the variable!]

print('hello,', end=' ') #Can actually edit the end option directly (we only know this via the python docs)
print('World') #now they print on the same line, cool right? since the default for print ends with \n

Interesting that "end" is just passed in as an argument and not as an option object

String Methods
#######################
str = str.strip() removes whitespace from str :::: aka .trim in js
str = str.capitalize() capitalizes the first letter (pretty cool)
str = str.title() captializes the first letter of each word

str = str.split(" ") splits it on whitespace into an array [exactly like js]
can even destructure from an array --- first, last = name.split(" ")    [unlike in js where we do const [first,last] = name.split(" ")]

Int Methods
########################
int("1") = 1 :::: [basically parseInt()]
+, -, / , *, %

Float Methods
#######################
float("1.2") = 1.2 :::: [turns the string into a float if applicable]
round(float("1.2")) = 1 :::: [Way better than Math.floor()]
round(float(".3333"), 2) = .33 :::: rounds to 2 decimals
f"{number:,}" :::: [formats the number with commas]
f"{number:.2f}" :::: formats the number to 2 decimals

Functions
#######################
hello() is a function call
def :::: is the keyword to define Functions [indents are important - indent below that code is part of that function]
def hello(): 
    print("hello")

def hello(name="luke"): [can define default values like in JS. very similar def = function]
    print(f"hello {name}")

functions must be above the call in the python script.

New Convention.####### now we can define our functions in any order so long as main is the last thing called
def main():
    name = input("What's your name? ")
    hello(name)

variables are scoped inside of the function to which it belongs [like in JS]

Returns.##########
Same as JS. Just (return x)
[python squares note: x**2, pow(x, 2)]

############################
LOGIC
############################
>, >=, <, <=, ==, != [same as js]
if x < y: [no parenthesis like in js, and instead of {} you use : and indents]

if
elif [else if in javascript (stop asking new questions if we fufill one)]

if score >= 90 and score <= 100: [and instead of && :::: or instead of ||]
    thing

[else is default case like in js]

[honestly, all mostly the same as in JS] :::: no ===, just == :::: 

MATCH.############################

match name: [match = switch in js && _ == default && | can be used for or in match && don't need breaks]
    case "Harry" | "Hermoine" | "Ron:
        print("Gryffindor")
    case "Draco":
        print("Slytherin")
    case _:
        print("Default")

LOOPS.#############################

i = 3
while i > 0:
    print("meow")
    i -= 1 [no i-- in python]

for i in [1,2,3] (will loop 3 times, one for each item in the "list" aka an array)
for i in range(3): (will loop 3 times. for i in range is sick)

common in python to use unused variables like so:
for _ in range(3): 

print("\nmeow" * 3, end='') also meows 3 times 

[(note: indentations mattering is weird)]

while True:
    n = int(input("What's x"))
    if n > 0
        break

LISTS.###################################
[Lists are like JS arrays]
Bracket notation like in JS (students[0])

for student in students: [just like in JS, only with the indent syntax]
    print(student)

for i in range(len(students)): [len instead of .length]
    print(students[i])

DICTS.#####################################
Key value pairs like JS objects
students = {
    "Hermoine": "Gryffindor, 
    "Draco": "Slytherin"
}
students["Hermione"] = Gryffindor

for student in students:
    print(student, students[student]) [this will print all of the keys of the dictionary... and then students[student] gets other value very cool]

can do arrays of objects in this too. 
students = [
    {"name": "Harry", "house": "Griff", "patronus": "Elk"},
    {"name": "Draco", "house": "Sylyth", "patronus": None}
]

for student in students:
    print(student["name"]) [prints each student's name etc...]

None = null in a dictionary

EXCEPTIONS.####################################

try-except blocks [pretty much like try/catch blocks in JS]
 
try:
    x = int(input("what's x? "))
    print(f"x is {x}")
except ValueError:  [could use a generic except instead by just doing except: (bad form, though)]
    print("x is not an integer")    

-----
try:
    x = int(input("what's x? "))
except ValueError:
    print("x is not an integer")

print(f"x is {x}")
[this "NameErrors" because... x = int... is invalid if "cat"]

------fix with
try:
    x = int(input("what's x? "))
except ValueError:
    print("x is not an integer")
else:
    print(f"x is {x}")
    
[can add else at the end of a try except block as a catchall... but its always called... unless an exception happens...]
[else only runs if no exceptions]

[while True loop w/ break to get out is cool but same as JS]
[return also breaks you out of while true loops]

---------pass
def getInt():
    while True:
        try:
            return int(input("what's x? "))
        except ValueError:
            pass
            
[pass just continues the loop from the top?]

MODULES.##############################################
import random
random.choice([1,2,3,4,5])

--from
(from random import choice)[to only import random.choice]
choice([1,2,3,4,5])

random.randint(a,b) -> random number between a and b (cool)
random.shuffle(x) -> takes in a list of values and randomly sorts them in place

-------------------
import statistics

statistics.mean([100, 90]) -> finds the mean (cool)

--------------------
import sys

sys.argv -> list of words typed after python command (like nodejs) 
print("hello, my name is ", sys.argv[1]) -> zzz... sys.argv[0] is the file call so it starts at [1] for the args

--sys guarding

if len(sys.argv) > 1:
    print("hello, my name is ", sys.argv[1])

--sys.exit

if len(sys.argv) < 2:
    sys.exit("Too few arugments") [intentional early exit whole program.]

print("hello, my name is", sys.argv[1])

--slice of a list
sys.argv[1:] [range 1 til ...everything else (mad cool tbh)]
for arg in sys.argv[1:]:
    print("hello, my name is", arg)

argv[1:-1] -> 1 to 1 from the end... epic

-----------------------------------------
PACKAGES

pyPI (python package index)
pip (like npm)

pip install cowsay (to get cowsay package)
if len(sys.argv) == 2:
    cowsay.cow("hello, " + sys.argv[1]) [lol]

---------------------------------------------
APIs

requests package
pip install requests

import requests
import sys

if len(sys.argv) != 2:
    sys.exit("no")

response = requests.get(
    "https://itunes.apple.com/search?entity=song&limit=1&term=" + sys.argv[1])
print(response.json())

[Very nice. Appears to be synchronus (blocks code below it) automatically]

----------------------------------------------------------
import json
import requests
import sys

if len(sys.argv) != 2:
    sys.exit("no")

response = requests.get(
    "https://itunes.apple.com/search?entity=song&limit=1&term=" + sys.argv[1])
print(json.dumps(response.json(), indent=2))
o = response.json()

for result in o["results"]:
    print(result["trackName"])

[this json.dumps indent=2 formats the json in the command line]

-----------------------------------
module imports

def main():
    hello("world")
    goodbye("world")


def hello(name):
    print(f"hello, {name}")


def goodbye(name):
    print(f"goodbye, {name}")


if __name__ == "__main__": [this bizzare if, basically says: (if this is the main file, run main, if imported, don't.)]
    main()

import sys
from sayings import hello [will run entire file sayings and look to import hello]

if len(sys.argv) == 2:
    hello(sys.argv[1])

UNIT TESTS.##########################################################
assert [asserts something is true. if wrong, you see an error]

def test_square():
    assert square(2) == 4
    assert square(3) == 9

pytest package [like jest i guess]

--in cmdline
python -m pytest test_calculator.py

def test_str():
    with pytest.raises(TypeError):
        square("cat")

-----------------------------------------
Make your own pacakges with __init__.py
$ python -m pytest test [runs the whole folder test if test has __init__.py in it]

######################################################################################
FILE IO.##############################################################################
######################################################################################

-----MORE LIST STUFF
append = [js push]
insert(0, "thing") = [js unshift]

for name in sorted(names):
    print(f"hello, {name}")

loops over a presorted list[interesting]

-----------------
back to fileIO

open -> [opens a file in py]
file = open("names.txt", "w") -> [open a file called names.txt and "w" write to it(recreatese file every time)]

file = open("names.txt", "a") -> [opens a file called names.txt and "a" to open it up for appending]
file.write(f"{name}\n") -> [writes the name to the file (overwrites the whole file)]
file.close() -> [saves the file]

-------------
with -> [function... as... variable I have no idea wtf this does (it autocloses the file apparently though? It opens a context manager for the file object)]
with open("names.txt", "a") as file:
    file.write(f"{name}\n")

--------------
with open("names.txt", "r") as file: [r is for read-mode (lets you read the file)]
    lines = file.readlines() [read lines returns the lines as a list]

for line in lines:
    print(f"hello, {line.rstrip()}") [rstrip gets rid of linebreaks and whitespace]

----------------
with open("names.txt", "r") as file:
    for line in file:
        print(f"hello, {line.rstrip()}")
[this apparently works... idk why... Oh. its because the "file" object is iterable and consists of each line]

----
names = []
with open("names.txt", "r") as file:
    for line in file:
        names.append(line.rstrip())

for name in sorted(names):
    print(f"hello, {name}")
[can sort them with this strategy]

(sorted(names, reverse="True")) will reverse the order of the sort (cool)

----
csvs are cool
Luke,Cool
Dude,Awesome
Harry,Squatter

with open("names.csv", "r") as file:
    for line in file:
        name, adjective = line.rstrip().split(",")
        print(f"hello {name}, you are {adjective}")

[can use split by commas to get an array from line (which isn't actually an array normally, but a string)]
[then use py destructuring to get name and adjective and print it out.]

---
students = []
with open("names.csv", "r") as file:
    for line in file:
        name, adjective = line.rstrip().split(",")
        students.append({"name": name, "adjective": adjective})


def get_name(student):
    return student["name"] -> [btw, higher order function. student is automatically passed in with key=get_name]


for student in sorted(students, key=get_name): [sorted calls get_name and inputs students as an arg]
    print(f"{student['name']} is in {student['adjective']}")

[SICK. Can sort the dictionary based on student["name"]].

---
students = []
with open("names.csv", "r") as file:
    for line in file:
        name, adjective = line.rstrip().split(",")
        students.append({"name": name, "adjective": adjective})

for student in sorted(students, key=lambda student: student["name"]):
    print(f"{student['name']} is in {student['adjective']}")

[lambda is an anonymous function equiv to ()=>{} in JS]

---
CSV library
import csv

with open("students.csv") as file:
    reader = csv.reader(file) ["Reader" returns rows preformatted for csv using the csv library]
    for name, home in reader: [Wow. we can destructure in the start of a for loop. can we do that in JS?]
        students.append({"name": name, "home: home})

[can use DictReader instead of reader if you have a header and refer to the data as row["name"] etc...]
[more robust since the csv can be manipulated more without strict destructuring]

---
CSV library to write csvs
import csv

name = "luke"
home = "cool house"

with open("student.csv", "a") as file:
    writer = csv.writer(file)
    writer.writerow([name, home])

---
or... even better. DictWriter

name = "luke"
home = "cool house"

with open("student.csv", "a") as file:
    writer = csv.DictWriter(file, fieldnames=["name", "home"]) [just make sure to state the headers]
    writer.DictWriter({"name": name, "home", home}) [write the dicts to the file...]

##################################
REGEX#############################
##################################

email = input("What's your email? ").strip()

if "@" in email: 
    print("Valid")
else:
    print("Invalid")

if blank in string automatically checks for truth [like .includes in js]
if @ appears in the string email, its valid here.
this sucks though.

---
if "@" and "." in email:
    print("Valid")
else 
    print("Invalid")

A little better, can use and to expand our expectations.

---
email = input("What's your email? ").strip()

username, domain = email.split("@")

if (username) and ("." in domain):
    print("Valid")
else:
    print("Invalid")
[way better already. two bools with an and mean both must be true]

---
email = input("What's your email? ").strip()

username, domain = email.split("@")

if (username) and ("." in domain) and (domain.endswith(".edu")):
    print("Valid")
else:
    print("Invalid")
[.endswith is self explanatory fortunately - no equiv in JS really]

---------------------------------------
REGEX library
import re

re.search(pattern,string, flags=0)

syntax.........................
. -> any char except newline
* -> 0 or more reps
+ -> 1 or more reps
? -> 0 or 1 reps
{m} -> m reps
{m,n} -> m-n reps
\ -> escape symbol (so we can match literal ., *, +, ?, etc...)
r"" -> indicates raw string passed in exactly as is (always use)
^ -> the start of the string
$ -> the end of the string
[] -> set of characters
[^] -> complementing the set (which means you can't match any of the chars)
[a-zA-Z0-9_] -> set of characters all a-z, A-Z, 0-9, and _
\w -> alphanumeric set
\W -> not alphanumeric set
\s -> whitespace set
\S -> not whitespace set
\d -> digit set
\D -> not digit set
(a|b) -> a or b
(...) a group
(?:...) non-capturing group

flags.....................................................
re.IGNORECASE (ignores upper/lowercase)
re.MULTILINE (ignores linebreaks)
re.DOTALL()

import re

email = input("What's your email? ").strip().lower()

if re.search(".+@.+", email):
    print("valid")
else:
    print("invalid")

---
import re

email = input("What's your email? ").strip().lower() [.lower() is like .toLowerCase()]

if re.search(r"^\w+@\w+\.edu$", email):
    print("valid")
else:
    print("invalid")

---
import re

email = input("What's your email? ").strip()

if re.search(r"^(\w|\.)+@(\w\.)?\w+\.edu$", email, re.IGNORECASE):
    print("valid")
else:
    print("invalid")

---
import re

name = input("What's your name? ").strip()

matches = re.search(r"^(.+), (.+)$", name) -> [matches.groups() returns both "captured" groups in the parenthesis]

if matches:
    last, first = matches.groups()
    name = f"{first}, {last}"
print(f"hello {name}")

WALRUS OPERATOR.###################################
:=
Basically decalres a variable and runs an if on the same line
import re

name = input("What's your name? ").strip()

if matches := re.search(r"^(.+), *(.+)$", name): --> [kind of sick. if matches... and matches = this... assign and ask bool]
    last, first = matches.groups()
    name = f"{first} {last}"


print(f"hello {name}")

---
naive
username = url.replace("https://twitter.com/", "")
print(username)
[find/replace]

---
# still naive
# username = url.removeprefix("https://twitter.com/")
# print(f"Username: {username}")

---
# re solution
username = re.sub("^.*(com/)", "", url)
print(username)

---
BEST solution
# more specific is better
if matches := re.search(r"^(?:https?://)?(?:www\.)?twitter\.com/([\w_]+)$", url, re.IGNORECASE):
    username = matches.group(1)
    print(f"Username: {username}")

######################################################
#######################################################
OOP
######################################################
#######################################################
TUPPLE EXAMPLE
(returning name and house from a function is a pythonism and is called a tupple)
(tupples are immutable and you cannot reassign them)

def main():
    name, house = get_student() ##Can also do student = get_student and then use student[0] and student[1]
    print(f"{name} from {house}")


def get_student():
    name = "Harry"
    house = "Griff"
    return (name, house)


main()

-------------------
can mutate dictionaries with student["name"] == "whatever" (obviously dicts are mutable like in JS)

-------------------
CLASSES
-------------------
invent your own "data types" and give them a name [... can be used as a placeholder (cool)]

classes create objects (they use dot notation like in JS unlike dicts) 
[objects are mutable, but can be made immutable]

[object attributes are "instanced" variables (attributes = props in JS)]

classes have methods (like in JS)

def __init__(self, param, param): -> [This is the pythonism for a constructor] (self = this in JS,)
[Must use self, and then other arguments in constructor]

---
class Student:
    def __init__(self, name, house):
        self.name = name  -> [creates new "attribute" called name on the student object]
        self.house = house

---
if not name: -> This is like in JS if !name

---
raise -> [create your own exceptions/error messages]
if not name:
    raise ValueError

if house not in ["Griff", "Huff", "Raven", "Slith"]:
    raise ValueError("Invalid house")

---
def __init__(self, name, house=None) -> [house is optional in the constructor now and defaults to None]

---
def __str__(self): -> [method that runs whenever it tries to display the raw object (like a getter?)]

---
custom methods

def charm(self):
    match self.patronus:
        case "Stag":
            return whatever

            ...etc....

---
CLASS EXAMPLE TIL NOW -> [very much similar to JS classes. Just need to add (self) to all methods]
class Student:
    def __init__(self, name, house, patronus):

        if not name:
            raise ValueError("Missing name")

        if house not in ["Griff", "Huff", "Raven", "Slith"]:
            raise ValueError("Invalid house")

        self.name = name
        self.house = house
        self.patronus = patronus

    def __str__(self):
        return f"{self.name} from {self.house}"

    def charm(self):
        return f"EXPECTO {self.patronus}!"


def main():
    student = get_student()
    print(student)
    print(student.charm())


def get_student():
    name = "Harry"  # these could be user inputs or whatever
    house = "Griff"
    patronus = "Stag"
    return Student(name, house, patronus)


if __name__ == "__main__":
    main()

---
PROPERTIES.###############################
An attribute that we have more control over
@property -> [decorators (functions that modifier other functions)]
[@property ]

@property decorator above a def decalres it as a getter
@house.setter [or whatever the attribute is called] declares it as a setter

---
Getters/Setters

    #Getter
    @property
    def house(self):
        return self._house

    #Setter -- magically calls a setter whenever someone tries to reassign student.house
    @house.setter
    def house(self, house):
        if house not in ["Griff", "Huffle", "Raven", "Slyth"]
            raise ValueError("Invalid House")
        self._house = house

[Property is _.house and attribute is .house] -> Its apparently called a private variable and is used to control waht house should be
Seperate internal storage of "house attribute" from the public-facing interface. _house is used for internal storage while
house is used as a public interface for accessing and modifying the house attribute.

basically, the getter/setter creates an interface with the house attribute.

In summary, a property is a special kind of attribute that allows you to define methods for controlling access and modification of an 
attribute's value. A variable is a named storage location for holding values, and an attribute is a named value or function associated 
with an object or a class. In the given example, the house property is used as the public-facing interface for the house attribute, 
and the _house variable is used for internal storage.

---
class Student:
    def __init__(self, name, house):
        self.name = name
        self.house = house

    def __str__(self):
        return f"{self.name} from {self.house}"

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, name):
        if not name:
            raise ValueError("Missing name")
        self._name = name

    @property
    def house(self):
        return self._house

    @house.setter
    def house(self, house):
        if house not in ["Griff", "Huff", "Raven", "Slith"]:
            raise ValueError("Invalid house")
        self._house = house

---
print(type(50)) -> [shows you the object type of 50. <class 'int>]

#############################################################################
MORE OOP.####################################################################
#############################################################################
class methods -> [want to be associated with the class itself and not the object of the class]
@classmethod 

non object-classes (aka, i don't need multiple sorting hats)

class Hat:

    houses = ["Griff", "Huff", "Raven", "Slith"]  # "class" variable

    @classmethod
    def sort(cls, name):
        house = random.choice(cls.houses)
        print(f"{name} is in {house}")

Hat.sort("Harry")
[very jank. no equiv in JS. class methods... objectless classes... huh.
Like a container for functions I guess.]

---
class Student:
    def __init__(self, name, house):
        self.name = name
        self.house = house

    def __str__(self):
        return f"{self.name} from {self.house}"

    @classmethod
    def get(cls):
        name = "Harry"  # imagine this is an input
        house = "Griff"
        return cls(name, house)


def main():
    student = Student.get()
    print(student)


if __name__ == "__main__":
    main()

---
inheritance in python -> 
class Student(Wizard): -> [this syntax is equiv to JS class Student extends Wizard]
    def __init__(self, name, house):
        super().__init__(name) -> [the super constructor]
        self.house = house

---
OPERATOR OVERLOADING.##########################################

overload + example....
class Vault:
    def __init__(self, galleons=0, sickles=0, knuts=0):
        self.galleons = galleons
        self.sickles = sickles
        self.knuts = knuts

    def __str__(self):
        return f"{self.galleons} g, {self.sickles} s, {self.knuts} k"

    def __add__(self, other):
        return f"{self.galleons + other.galleons} g, {self.sickles + other.sickles} s, {self.knuts + other.knuts} k"


potter = Vault(100, 50, 25)
print(potter)

weasley = Vault(25, 50, 100)
print(weasley)

print(potter + weasley)

---
############################################################################################
ET CETERA##################################################################################
############################################################################################

Sets -> [like in JS]

---
#Manual implementation of set
students = [
    {"name": "Dude", "house": "cool"},
    {"name": "Bro", "house": "woah"},
    {"name": "Man", "house": "woah"},
    {"name": "Luke", "house": "apartment"},
]

houses = []

for student in students:
    if student["house"] not in houses:
        houses.append(student["house"])

for house in sorted(houses):
    print(house)

---
#Better implementation of set

students = [
    {"name": "Dude", "house": "cool"},
    {"name": "Bro", "house": "woah"},
    {"name": "Man", "house": "woah"},
    {"name": "Luke", "house": "apartment"},
]

houses = set()

for student in students:
    houses.add(student["house"])

for house in sorted(houses):
    print(house)

[Just like in JS, where set automatically only returns one of each type]
---

Global Variables -> [not as good as in JS. Some additional rules]
[If you declare a variable before hand... as a global, you need to use the keyword global]

ex.

balance = 0


def main():
    print("Balance: ", balance)
    deposit(100)
    withdraw(50)
    print("Balance: ", balance)


def deposit(num):
    global balance -> [adding "global" before balance makes it so python doesn't suck]
    balance += num


def withdraw(num):
    global balance
    balance -= num


if __name__ == "__main__":
    main()

[Real solution: OOP it. ROFL]
--- OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP

class Account:
    def __init__(self):
        self._balance = 0

    @property
    def balance(self):
        return self._balance

    def deposit(self, n):
        self._balance += n

    def withdraw(self, n):
        self._balance -= n


def main():
    account = Account()
    print(f"Balance: {account.balance}")
    account.deposit(100)
    account.withdraw(50)
    print(f"Balance: {account.balance}")


if __name__ == "__main__":
    main()

---
CONSTANTS.##############################################################################
[no real constants rofl]

MEOWS = 3

for _ in range(MEOWS):
    print("meow")

[just pythonic convention -- we can totes mutate meows though or reassign it. but its "honor system" so you can fuck up still]

---CLASS SOLUTION OOOOOP
class Cat:
    MEOWS = 3

    def meow(self):
        for _ in range(Cat.MEOWS):
            print("meow")


cat = Cat()
cat.meow()

---
TYPE HINTS.###############################################################################

pip install mypy
python -m mypy meows2.py -> [run it with the type checker (kind of cool)]

def meow(n: int) -> None:
    for _ in range(n):
        print("meow")

meow("hi")

[sort of like TS]

def meow(n: int) -> str:       -> [kind of cool, its like TS. just (argument: type) -> type [return type]]
    return "meow\n" * n


number: int = 5
meows: str = meow(number)
print(meows, end="")

---
DOC STRINGS.###############################################################################

def meow(n: int) -> str:
    """Meow n times."""
    return "meow\n" * n

(adds Meow n times into the intellisense scrollover in vscode (pretty cool))

"""
Meow n times.
:param n: Number of times to meow
:type n: int
:raise TypeError: If n is not an int
:return: A string of n meows, one per line
:rtype: str
"""

[pretty nice tbh. Idk how to do this in JS]

---
ARGPARSE.###################################################################################

import argparse

parser = argparse.ArgumentParser(description="Meow like a cat")
parser.add_argument("-n", default=1, help="number of times to meow", type=int)
args = parser.parse_args()

for _ in range(args.n):
    print("meow")

[kind of cool for cli apps. Going to have to read up on argparse if i want to use it though.]

---
UNPACKING.#####################################################################################

[Unpacking is sick. It's kind of like the spread operator]

def total(galleons, sickles, knuts):
    return (galleons * 17 + sickles) * 29 + knuts


coins = [100, 50, 25]

print(total(*coins), "Knuts")

[just use *array and it passes it in as 3 seperate args]

def total(galleons, sickles, knuts):
    return (galleons * 17 + sickles) * 29 + knuts


coins = {"galleons": 100, "sickles": 50, "knuts": 25}

print(total(**coins), "Knuts")

[for dicts, use ** (siiickkk)]

*args, **kwargs.#############################################################################

def f(*args, **kwargs):  # any number of args as a tupple/list, and any number of key word args as a dictionary
    print("Named:", kwargs)


f(100, 50, 25, galleons=100, sickles=50, knuts=25) -> {"galleons":100, "sickles"=50, "knuts"=25}

MAPS.#######################################################################################

without map
def main():
    yell("This", "is", "CS50")


def yell(*words):
    uppercased = []
    for word in words:
        uppercased.append(word.upper())
    print(*uppercased)


if __name__ == "__main__":
    main()

---
with map

def yell(*words):
    uppercased = map(str.upper, words)
    print(*uppercased)

[different syntax than JS. js would be words.map(word => word.toUpperCase())]
[this one uses map as a function -> map(function, list to apply function to)]

LIST COMPREHENSIONS.#######################################################################

def yell(*words):
    uppercased = [word.upper() for word in words]
    print(*uppercased)

[fucking woah. word.upper() for word in words... Its kind of cool af. swag. -> Wow. idk how to compare this to JS. New idea]

---
students = [
    {"name": "Harry", "house": "Griff"},
    {"name": "Ron", "house": "Griff"},
    {"name": "Draco", "house": "Slith"}
]

griffs = {
    student["name"] for student in students if student["house"] == "Griff"
}

for griff in sorted(griffs):
    print(griff)

[wtf -> I guess its like -> thing for variable in list if bool]

---FILTERING

students = [
    {"name": "Harry", "house": "Griff"},
    {"name": "Ron", "house": "Griff"},
    {"name": "Draco", "house": "Slith"}
]


def is_griff(student):
    return student["house"] == "Griff"


griffs = filter(is_griff, students)

for griff in griffs:
    print(griff["name"])

[sick filter, like python map, you pass it a function and then the list]

---------------USE ANONYMOUS Functions
students = [
    {"name": "Harry", "house": "Griff"},
    {"name": "Ron", "house": "Griff"},
    {"name": "Draco", "house": "Slith"}
]

griffs = filter(lambda student: student["house"] == "Griff", students)

for griff in griffs:
    print(griff["name"])

griffs = [{"name": student, "house": "Griff"} for student in students]

[List comprehension is sick. This is basically a JS map returning an object for each student in students]

DICTIONARY COMPREHENSION.##########################################################################
students = ["Hermoine", "Harry", "Ron"]

griffs = {student: "Griff" for student in students}

print(griffs)
[Baller. outputs {'Hermoine': 'Griff', 'Harry': 'Griff', 'Ron': 'Griff'}]

ENUMERATE.##########################################################################################
students = ["Hermoine", "Harry", "Ron"]

for i, student in enumerate(students):
    print(i + 1, student)

[idk, kind of cool i guess, idk when i would use this. numbered lists?]

GENERATORS.#########################################################################################

def main():
    n = int(input("What's n?"))
    for s in sheep(n):
        print(s)


def sheep(n):
    for i in range(n):
        yield "bah" * i


if __name__ == "__main__":
    main()

[yield is bizzare. it returns a little data at a time... i dont get it tbh --- its async i guess]
